unit View.Relatorio.AbastecimentoPorDia;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Mask,
  View.Relatorio.AbastecimentoPorDiaRL, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, System.StrUtils,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, DataModule, Datasnap.DBClient;

type
  TfrmRelatorioPorDia = class(TForm)
    edtInicio: TMaskEdit;
    edtFim: TMaskEdit;
    rdgTipoTanque: TRadioGroup;
    Label1: TLabel;
    Label2: TLabel;
    btnGerarRelatorio: TButton;
    btnSair: TButton;
    procedure btnSairClick(Sender: TObject);
    procedure btnGerarRelatorioClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    function DoCriarRelatorio: TClientDataSet;
  public
    { Public declarations }
  end;

var
  frmRelatorioPorDia: TfrmRelatorioPorDia;

implementation

{$R *.dfm}

procedure TfrmRelatorioPorDia.btnGerarRelatorioClick(Sender: TObject);
begin
  frmRelatorioPorDiaRL := TfrmRelatorioPorDiaRL.Create(Self);
  try
    frmRelatorioPorDiaRL.rllbDataInicioFim.Caption := Concat(
      'De ',
      edtInicio.Text,
      ' Até ',
      edtFim.Text
    );

    frmRelatorioPorDiaRL.cdsRelatorio.CloneCursor(DoCriarRelatorio, True);
    frmRelatorioPorDiaRL.RLReport1.PreviewModal;
  finally
    frmRelatorioPorDiaRL.Free;
  end;
end;

procedure TfrmRelatorioPorDia.btnSairClick(Sender: TObject);
begin
  Self.Close;
end;

function TfrmRelatorioPorDia.DoCriarRelatorio: TClientDataSet;
begin
  Result := nil;

  if edtInicio.Text = edtInicio.EditMask then begin
    Application.MessageBox('ATENÇÃO: Informe a data de inicio',
      'Informação', MB_OK);
    edtInicio.SetFocus;
    exit;
  end;

  if edtFim.Text = edtFim.EditMask then begin
    Application.MessageBox('ATENÇÃO: Informe a data final',
      'Informação', MB_OK);
    edtFim.SetFocus;
    exit;
  end;

  var LFilter := '';
  case rdgTipoTanque.ItemIndex of
    0: LFilter := ' and t.tipo_combustivel = ''G'' ';
    1: LFilter := ' and t.tipo_combustivel = ''D'' ';
  end;

  var LSql := Concat(
    'select a.data, ',
           't.descricao as tanque, ',
           'b.descricao as bomba, ',
           't.preco_litro, ',
           'a.qtd_litros, ',
           'a.valor_total as total, ',
           'a.valor_imposto as imposto ',
      'from abastecimento a inner join bomba b on b.id = a.bomba_id ',
                           'inner join tanque t on t.id = b.tanque_id ',
     'where a.data between :dtini and :dtfim ',
     LFilter,
    'order by ',
      'a.data, ',
      't.tipo_combustivel '
  );

  var LQry := TFDQuery.Create(nil);
  LQry.Connection := dm.Connection;
  try
    LQry.SQL.Clear;
    LQry.SQL.Add(LSql);
    LQry.ParamByName('dtini').AsDate := StrToDate(edtInicio.Text);
    LQry.ParamByName('dtfim').AsDate := StrToDate(edtFim.Text);
    LQry.Open;

    Result := TClientDataSet.Create(Self);
    with Result do begin
      FieldDefs.Add('data', ftDate);
      FieldDefs.Add('tanque', ftString, 50);
      FieldDefs.Add('bomba', ftString, 50);
      FieldDefs.Add('preco_litro', ftFloat);
      FieldDefs.Add('qtd_litros', ftFloat);
      FieldDefs.Add('total', ftFloat);
      FieldDefs.Add('imposto', ftFloat);

      CreateDataSet;

      LQry.First;
      while not LQry.Eof do begin
        Append;
        FieldByName('data').AsDateTime := LQry.FieldByName('data').AsDateTime;
        FieldByName('tanque').AsString := LQry.FieldByName('tanque').AsString;
        FieldByName('bomba').AsString := LQry.FieldByName('bomba').AsString;
        FieldByName('preco_litro').AsFloat := LQry.FieldByName('preco_litro').AsFloat;
        FieldByName('qtd_litros').AsFloat := LQry.FieldByName('qtd_litros').AsFloat;
        FieldByName('total').AsFloat := LQry.FieldByName('total').AsFloat;
        FieldByName('imposto').AsFloat := LQry.FieldByName('imposto').AsFloat;
        Post;

        LQry.Next;
      end;
    end;
  finally
    LQry.Free;
  end;
end;

procedure TfrmRelatorioPorDia.FormShow(Sender: TObject);
begin
  edtInicio.Text := DateToStr(Date);
  edtFim.Text := DateToStr(Date);
end;

end.
